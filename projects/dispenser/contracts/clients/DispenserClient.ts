/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getAssetId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDispenseAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSporeBalance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDispenseCount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createSporeAsset(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dispense(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetId": {
          "type": "uint64",
          "key": "assetId"
        },
        "unitaryDispense": {
          "type": "uint64",
          "key": "unitaryDispense"
        },
        "dispenseCount": {
          "type": "uint64",
          "key": "dispenseCount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Dispenser",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAssetId",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDispenseAmount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getSporeBalance",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDispenseCount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createSporeAsset",
        "desc": "Create SPORE coin asset",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The name of the asset"
          },
          {
            "name": "unitName",
            "type": "string",
            "desc": "The unit name of the asset"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The id of the asset"
        }
      },
      {
        "name": "dispense",
        "desc": "Dispense the asset",
        "args": [
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "The id of the asset"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Dispenser smart contract.
 */
export type Dispenser = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getAssetId()uint64' | 'getAssetId', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getDispenseAmount()uint64' | 'getDispenseAmount', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getSporeBalance()uint64' | 'getSporeBalance', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getDispenseCount()uint64' | 'getDispenseCount', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'createSporeAsset(string,string)uint64' | 'createSporeAsset', {
      argsObj: {
        /**
         * The name of the asset
         */
        name: string
        /**
         * The unit name of the asset
         */
        unitName: string
      }
      argsTuple: [name: string, unitName: string]
      /**
       * The id of the asset
       */
      returns: bigint
    }>
    & Record<'dispense(uint64)void' | 'dispense', {
      argsObj: {
        /**
         * The id of the asset
         */
        assetId: bigint | number
      }
      argsTuple: [assetId: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'assetId'?: IntegerState
      'unitaryDispense'?: IntegerState
      'dispenseCount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DispenserSig = keyof Dispenser['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DispenserSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Dispenser smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DispenserSig> = Dispenser['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Dispenser smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DispenserSig> = Dispenser['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DispenserCreateCalls = (typeof DispenserCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DispenserCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DispenserDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DispenserCreateCalls) => DispenserCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DispenserCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Dispenser smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getAssetId()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetId(args: MethodArgs<'getAssetId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAssetId()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getDispenseAmount()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDispenseAmount(args: MethodArgs<'getDispenseAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getDispenseAmount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getSporeBalance()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSporeBalance(args: MethodArgs<'getSporeBalance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getSporeBalance()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getDispenseCount()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDispenseCount(args: MethodArgs<'getDispenseCount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getDispenseCount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createSporeAsset(string,string)uint64 ABI method
   *
   * Create SPORE coin asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSporeAsset(args: MethodArgs<'createSporeAsset(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createSporeAsset(string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.unitName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the dispense(uint64)void ABI method
   *
   * Dispense the asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dispense(args: MethodArgs<'dispense(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dispense(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Dispenser smart contract
 */
export class DispenserClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DispenserClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Dispenser['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Dispenser smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DispenserDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DispenserCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Dispenser smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DispenserCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Dispenser smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getAssetId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAssetId(args: MethodArgs<'getAssetId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.getAssetId(args, params))
  }

  /**
   * Calls the getDispenseAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getDispenseAmount(args: MethodArgs<'getDispenseAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.getDispenseAmount(args, params))
  }

  /**
   * Calls the getSporeBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getSporeBalance(args: MethodArgs<'getSporeBalance()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.getSporeBalance(args, params))
  }

  /**
   * Calls the getDispenseCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getDispenseCount(args: MethodArgs<'getDispenseCount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.getDispenseCount(args, params))
  }

  /**
   * Calls the createSporeAsset(string,string)uint64 ABI method.
   *
   * Create SPORE coin asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The id of the asset
   */
  public createSporeAsset(args: MethodArgs<'createSporeAsset(string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.createSporeAsset(args, params))
  }

  /**
   * Calls the dispense(uint64)void ABI method.
   *
   * Dispense the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public dispense(args: MethodArgs<'dispense(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DispenserCallFactory.dispense(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Dispenser['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetId() {
        return DispenserClient.getIntegerState(state, 'assetId')
      },
      get unitaryDispense() {
        return DispenserClient.getIntegerState(state, 'unitaryDispense')
      },
      get dispenseCount() {
        return DispenserClient.getIntegerState(state, 'dispenseCount')
      },
    }
  }

  public compose(): DispenserComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getAssetId(args: MethodArgs<'getAssetId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDispenseAmount(args: MethodArgs<'getDispenseAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDispenseAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSporeBalance(args: MethodArgs<'getSporeBalance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSporeBalance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDispenseCount(args: MethodArgs<'getDispenseCount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDispenseCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createSporeAsset(args: MethodArgs<'createSporeAsset(string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSporeAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      dispense(args: MethodArgs<'dispense(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.dispense(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DispenserComposer
  }
}
export type DispenserComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getAssetId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetId(args: MethodArgs<'getAssetId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'getAssetId()uint64'>]>

  /**
   * Calls the getDispenseAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDispenseAmount(args: MethodArgs<'getDispenseAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'getDispenseAmount()uint64'>]>

  /**
   * Calls the getSporeBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSporeBalance(args: MethodArgs<'getSporeBalance()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'getSporeBalance()uint64'>]>

  /**
   * Calls the getDispenseCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDispenseCount(args: MethodArgs<'getDispenseCount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'getDispenseCount()uint64'>]>

  /**
   * Calls the createSporeAsset(string,string)uint64 ABI method.
   *
   * Create SPORE coin asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSporeAsset(args: MethodArgs<'createSporeAsset(string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'createSporeAsset(string,string)uint64'>]>

  /**
   * Calls the dispense(uint64)void ABI method.
   *
   * Dispense the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dispense(args: MethodArgs<'dispense(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, MethodReturn<'dispense(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Dispenser smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DispenserComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DispenserComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DispenserComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DispenserComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DispenserComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DispenserComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
