#pragma version 10

// This TEAL was generated by TEALScript v0.93.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Verifier.algo.ts:14
	// this.maxAssetAmount.value = 1_000
	byte 0x6d61784173736574416d6f756e74 // "maxAssetAmount"
	int 1_000
	app_global_put
	retsub

// initVerifier(uint64,address)void
*abi_route_initVerifier:
	// dispenserAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (dispenserAddress) for initVerifier must be a address
	assert

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute initVerifier(uint64,address)void
	callsub initVerifier
	int 1
	return

// initVerifier(assetId: AssetID, dispenserAddress: Address): void
//
// Initializes the Verifier smart contract
//
// @param assetId
// @returns The id of the asset
initVerifier:
	proto 2 0

	// contracts/Verifier.algo.ts:24
	// assert(!this.assetId.exists)
	txna Applications 0
	byte 0x61737365744964 // "assetId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Verifier.algo.ts:25
	// assert(!this.dispenserAddress.exists)
	txna Applications 0
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Verifier.algo.ts:27
	// this.assetId.value = assetId
	byte 0x61737365744964 // "assetId"
	frame_dig -1 // assetId: AssetID
	app_global_put

	// contracts/Verifier.algo.ts:28
	// this.dispenserAddress.value = dispenserAddress
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	frame_dig -2 // dispenserAddress: Address
	app_global_put

	// contracts/Verifier.algo.ts:31
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Verifier.algo.ts:32
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/Verifier.algo.ts:33
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/Verifier.algo.ts:34
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// verifyAssetTxnAmount(uint64)bool
*abi_route_verifyAssetTxnAmount:
	// The ABI return prefix
	byte 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute verifyAssetTxnAmount(uint64)bool
	callsub verifyAssetTxnAmount
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// verifyAssetTxnAmount(amount: uint64): boolean
//
// Verifies the amount being sent is within the bounds
//
// @param amount
// @returns
verifyAssetTxnAmount:
	proto 1 1

	// contracts/Verifier.algo.ts:45
	// assert(this.assetId.exists)
	txna Applications 0
	byte 0x61737365744964 // "assetId"
	app_global_get_ex
	swap
	pop
	assert

	// *if0_condition
	// contracts/Verifier.algo.ts:47
	// amount <= 0 || amount > this.maxAssetAmount.value
	frame_dig -1 // amount: uint64
	int 0
	<=
	dup
	bnz *skip_or0
	frame_dig -1 // amount: uint64
	byte 0x6d61784173736574416d6f756e74 // "maxAssetAmount"
	app_global_get
	>
	||

*skip_or0:
	bz *if0_end

	// *if0_consequent
	// contracts/Verifier.algo.ts:48
	// return false;
	int 0
	retsub

*if0_end:
	// *if1_condition
	// contracts/Verifier.algo.ts:51
	// amount % 50 !== 0
	frame_dig -1 // amount: uint64
	int 50
	%
	int 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/Verifier.algo.ts:52
	// return false;
	int 0
	retsub

*if1_end:
	// contracts/Verifier.algo.ts:54
	// return true;
	int 1
	retsub

// sendAssetToContract(axfer)string
*abi_route_sendAssetToContract:
	// The ABI return prefix
	byte 0x151f7c75

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 0 (axfer) for sendAssetToContract must be a axfer transaction
	assert

	// execute sendAssetToContract(axfer)string
	callsub sendAssetToContract
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// sendAssetToContract(axfer: AssetTransferTxn): string
//
// Send asset to contract
//
// @returns The id of the asset
sendAssetToContract:
	proto 1 1

	// contracts/Verifier.algo.ts:63
	// assert(this.assetId.exists)
	txna Applications 0
	byte 0x61737365744964 // "assetId"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/Verifier.algo.ts:64
	// assert(this.dispenserAddress.exists)
	txna Applications 0
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	app_global_get_ex
	swap
	pop
	assert

	// *if2_condition
	// contracts/Verifier.algo.ts:66
	// this.verifyAssetTxnAmount(axfer.assetAmount)
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	callsub verifyAssetTxnAmount
	bz *if2_end

	// *if2_consequent
	// contracts/Verifier.algo.ts:67
	// return this.txn.txID;
	txn TxID
	retsub

*if2_end:
	// contracts/Verifier.algo.ts:70
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetAmount: axfer.assetAmount,
	//       assetReceiver: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Verifier.algo.ts:71
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/Verifier.algo.ts:72
	// assetAmount: axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// contracts/Verifier.algo.ts:73
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Verifier.algo.ts:75
	// return this.txn.txID;
	txn TxID
	retsub

// getDispenserAddress()address
*abi_route_getDispenserAddress:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getDispenserAddress()address
	callsub getDispenserAddress
	concat
	log
	int 1
	return

// getDispenserAddress(): Address
//
// Get dispenser address
//
// @returns The address of the dispenser
getDispenserAddress:
	proto 0 1

	// contracts/Verifier.algo.ts:84
	// return this.dispenserAddress.value;
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	app_global_get
	retsub

// sendAssetBalanceToDispenser()void
*abi_route_sendAssetBalanceToDispenser:
	// execute sendAssetBalanceToDispenser()void
	callsub sendAssetBalanceToDispenser
	int 1
	return

// sendAssetBalanceToDispenser(): void
sendAssetBalanceToDispenser:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/Verifier.algo.ts:88
	// assert(this.dispenserAddress.exists)
	txna Applications 0
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/Verifier.algo.ts:89
	// assert(this.assetId.exists)
	txna Applications 0
	byte 0x61737365744964 // "assetId"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/Verifier.algo.ts:91
	// appAddress = this.app.address
	global CurrentApplicationAddress
	frame_bury 0 // appAddress: address

	// contracts/Verifier.algo.ts:92
	// assetBalance = appAddress.assetBalance(this.assetId.value)
	frame_dig 0 // appAddress: address
	byte 0x61737365744964 // "assetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 1 // assetBalance: uint64

	// *if3_condition
	// contracts/Verifier.algo.ts:93
	// assetBalance > 0
	frame_dig 1 // assetBalance: uint64
	int 0
	>
	bz *if3_end

	// *if3_consequent
	// contracts/Verifier.algo.ts:94
	// sendAssetTransfer({
	//         xferAsset: this.assetId.value,
	//         assetAmount: assetBalance,
	//         assetReceiver: this.dispenserAddress.value,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Verifier.algo.ts:95
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/Verifier.algo.ts:96
	// assetAmount: assetBalance
	frame_dig 1 // assetBalance: uint64
	itxn_field AssetAmount

	// contracts/Verifier.algo.ts:97
	// assetReceiver: this.dispenserAddress.value
	byte 0x64697370656e73657241646472657373 // "dispenserAddress"
	app_global_get
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if3_end:
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "initVerifier(uint64,address)void"
	method "verifyAssetTxnAmount(uint64)bool"
	method "sendAssetToContract(axfer)string"
	method "getDispenserAddress()address"
	method "sendAssetBalanceToDispenser()void"
	txna ApplicationArgs 0
	match *abi_route_initVerifier *abi_route_verifyAssetTxnAmount *abi_route_sendAssetToContract *abi_route_getDispenserAddress *abi_route_sendAssetBalanceToDispenser

	// this contract does not implement the given ABI method for call NoOp
	err