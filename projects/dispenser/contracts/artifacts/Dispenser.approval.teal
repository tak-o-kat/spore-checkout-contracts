#pragma version 10

// This TEAL was generated by TEALScript v0.93.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Dispenser.algo.ts:14
	// assert(!this.unitaryDispense.exists)
	txna Applications 0
	byte 0x756e697461727944697370656e7365 // "unitaryDispense"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Dispenser.algo.ts:15
	// assert(!this.dispenseCount.exists)
	txna Applications 0
	byte 0x64697370656e7365436f756e74 // "dispenseCount"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Dispenser.algo.ts:16
	// this.unitaryDispense.value = 1_000
	byte 0x756e697461727944697370656e7365 // "unitaryDispense"
	int 1_000
	app_global_put

	// contracts/Dispenser.algo.ts:17
	// this.dispenseCount.value = 0
	byte 0x64697370656e7365436f756e74 // "dispenseCount"
	int 0
	app_global_put
	retsub

// getAssetId()uint64
*abi_route_getAssetId:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAssetId()uint64
	callsub getAssetId
	itob
	concat
	log
	int 1
	return

// getAssetId(): AssetID
getAssetId:
	proto 0 1

	// contracts/Dispenser.algo.ts:21
	// return this.assetId.value;
	byte 0x61737365744964 // "assetId"
	app_global_get
	retsub

// getDispenseAmount()uint64
*abi_route_getDispenseAmount:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getDispenseAmount()uint64
	callsub getDispenseAmount
	itob
	concat
	log
	int 1
	return

// getDispenseAmount(): uint64
getDispenseAmount:
	proto 0 1

	// contracts/Dispenser.algo.ts:25
	// return this.unitaryDispense.value;
	byte 0x756e697461727944697370656e7365 // "unitaryDispense"
	app_global_get
	retsub

// getSporeBalance()uint64
*abi_route_getSporeBalance:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getSporeBalance()uint64
	callsub getSporeBalance
	itob
	concat
	log
	int 1
	return

// getSporeBalance(): uint64
getSporeBalance:
	proto 0 1

	// contracts/Dispenser.algo.ts:29
	// return this.app.address.assetBalance(this.assetId.value);
	global CurrentApplicationAddress
	byte 0x61737365744964 // "assetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	retsub

// getDispenseCount()uint64
*abi_route_getDispenseCount:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getDispenseCount()uint64
	callsub getDispenseCount
	itob
	concat
	log
	int 1
	return

// getDispenseCount(): uint64
getDispenseCount:
	proto 0 1

	// contracts/Dispenser.algo.ts:33
	// return this.dispenseCount.value;
	byte 0x64697370656e7365436f756e74 // "dispenseCount"
	app_global_get
	retsub

// createSporeAsset(string,string)uint64
*abi_route_createSporeAsset:
	// The ABI return prefix
	byte 0x151f7c75

	// unitName: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createSporeAsset(string,string)uint64
	callsub createSporeAsset
	itob
	concat
	log
	int 1
	return

// createSporeAsset(name: string, unitName: string): AssetID
//
// Create SPORE coin asset
//
// @param name The name of the asset
// @param unitName The unit name of the asset
// @returns The id of the asset
createSporeAsset:
	proto 2 1

	// contracts/Dispenser.algo.ts:44
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts/Dispenser.algo.ts:45
	// assert(!this.assetId.exists)
	txna Applications 0
	byte 0x61737365744964 // "assetId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Dispenser.algo.ts:46
	// this.assetId.value = sendAssetCreation({
	//       configAssetName: name,
	//       configAssetUnitName: unitName,
	//       configAssetTotal: 1_000_000_000,
	//       configAssetDecimals: 0,
	//       configAssetDefaultFrozen: 0,
	//     })
	byte 0x61737365744964 // "assetId"
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/Dispenser.algo.ts:47
	// configAssetName: name
	frame_dig -1 // name: string
	itxn_field ConfigAssetName

	// contracts/Dispenser.algo.ts:48
	// configAssetUnitName: unitName
	frame_dig -2 // unitName: string
	itxn_field ConfigAssetUnitName

	// contracts/Dispenser.algo.ts:49
	// configAssetTotal: 1_000_000_000
	int 1_000_000_000
	itxn_field ConfigAssetTotal

	// contracts/Dispenser.algo.ts:50
	// configAssetDecimals: 0
	int 0
	itxn_field ConfigAssetDecimals

	// contracts/Dispenser.algo.ts:51
	// configAssetDefaultFrozen: 0
	int 0
	itxn_field ConfigAssetDefaultFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

	// contracts/Dispenser.algo.ts:54
	// return this.assetId.value;
	byte 0x61737365744964 // "assetId"
	app_global_get
	retsub

// dispense(uint64)void
*abi_route_dispense:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute dispense(uint64)void
	callsub dispense
	int 1
	return

// dispense(assetId: AssetID): void
//
// Dispense the asset
//
// @param assetId The id of the asset
dispense:
	proto 1 0

	// contracts/Dispenser.algo.ts:66
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetAmount: this.unitaryDispense.value,
	//       assetReceiver: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Dispenser.algo.ts:67
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/Dispenser.algo.ts:68
	// assetAmount: this.unitaryDispense.value
	byte 0x756e697461727944697370656e7365 // "unitaryDispense"
	app_global_get
	itxn_field AssetAmount

	// contracts/Dispenser.algo.ts:69
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Dispenser.algo.ts:72
	// this.dispenseCount.value += 1
	byte 0x64697370656e7365436f756e74 // "dispenseCount"
	app_global_get
	int 1
	+
	byte 0x64697370656e7365436f756e74 // "dispenseCount"
	swap
	app_global_put
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "getAssetId()uint64"
	method "getDispenseAmount()uint64"
	method "getSporeBalance()uint64"
	method "getDispenseCount()uint64"
	method "createSporeAsset(string,string)uint64"
	method "dispense(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_getAssetId *abi_route_getDispenseAmount *abi_route_getSporeBalance *abi_route_getDispenseCount *abi_route_createSporeAsset *abi_route_dispense

	// this contract does not implement the given ABI method for call NoOp
	err