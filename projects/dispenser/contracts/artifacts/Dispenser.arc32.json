{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getAssetId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDispenseAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSporeBalance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDispenseCount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createSporeAsset(string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dispense(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetId": {
          "type": "uint64",
          "key": "assetId"
        },
        "unitaryDispense": {
          "type": "uint64",
          "key": "unitaryDispense"
        },
        "dispenseCount": {
          "type": "uint64",
          "key": "dispenseCount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Dispenser",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAssetId",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDispenseAmount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getSporeBalance",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDispenseCount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createSporeAsset",
        "desc": "Create SPORE coin asset",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The name of the asset"
          },
          {
            "name": "unitName",
            "type": "string",
            "desc": "The unit name of the asset"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The id of the asset"
        }
      },
      {
        "name": "dispense",
        "desc": "Dispense the asset",
        "args": [
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "The id of the asset"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}